#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require_relative '../lib/file_discard'

options = OpenStruct.new(force: 0)
parser  = OptionParser.new do |opts|
  Version = FileDiscard::VERSION
  Release = FileDiscard::RELEASE

  opts.on('-f', '--force', 'when provided twice, permanently remove targets') do
    options.force += 1
  end

  opts.on('-d', '--dir', 'allow empty directories to be discarded') do |v|
    options.directory = v
  end

  [?r,?R].each do |o|
    opts.on("-#{o}", '--recursive', 'allow directories to be discarded recursively') do |v|
      options.recursive = v
    end
  end

  opts.on('-v', '--verbose', 'show where files are discarded') do |v|
    options.verbose = v
  end

  opts.on('-h', '--help', 'show this message') do
    puts opts
    exit
  end

  opts.on('--version', 'show version') do
    puts opts.ver
    exit
  end

  opts.separator('')
  opts.separator('Options ignored to provide compatibility with "rm":')
  [?i,?I].each {|o| opts.on("-#{o}")}

  opts.banner << ' file ...'
end

parser.parse!

if ARGV.size < 1
  puts parser
  exit 64 # use same exit status as rm with no files
end

FileDiscard.create_trash_when_missing = true

status = 0
ARGV.each do |file|
  begin
    FileDiscard.discard(file, options.marshal_dump)
  rescue Errno::EINVAL, Errno::ENOENT => ex
    $stderr.puts "#{parser.program_name}: #{file}: #{ex.message}"
    status = 1
  rescue Exception => ex
    $stderr.puts "#{parser.program_name}: #{file}: #{ex.class} #{ex.message}"
    options.verbose and $stderr.puts ex.backtrace
    status = 2
  end
end

exit status
